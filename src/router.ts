
// This file is automatically generated, do not edit.
import {
	type NavigateOptions,
	useNavigate as useNavigate_,
	useParams as useParams_,
} from "@solidjs/router";

export type PathsWithParams = 
	| "/u/:uid"
	| "/u/:uid/you/moderation/content-filter/labeler/:labeler"
	| "/u/:uid/you/moderation/keyword-filter/:fid/edit"
	| "/u/:uid/profile/:actor/post/:status/reposts"
	| "/u/:uid/you/moderation/content-filter"
	| "/u/:uid/you/moderation/content-filter/global"
	| "/u/:uid/you/moderation/keyword-filter"
	| "/u/:uid/profile/:actor/post/:status"
	| "/u/:uid/profile/:actor/post/:status/likes"
	| "/u/:uid/profile/:actor/lists/:list/edit"
	| "/u/:uid/you/moderation/keyword-filter/add"
	| "/u/:uid/you/moderation/lists/self"
	| "/u/:uid/you/moderation/lists/self/new"
	| "/u/:uid/you/moderation/repost-filter"
	| "/u/:uid/profile/:actor/lists/:list"
	| "/u/:uid/profile/:actor/lists/:list/feed"
	| "/u/:uid/you/moderation/lists"
	| "/u/:uid/you/moderation/muted"
	| "/u/:uid/profile/:actor/feed/:feed"
	| "/u/:uid/you/moderation/lists/block"
	| "/u/:uid/profile/:actor/followers"
	| "/u/:uid/you/moderation/lists/mute"
	| "/u/:uid/you/moderation/muted/temp"
	| "/u/:uid/profile/:actor/follows"
	| "/u/:uid/settings/explore"
	| "/u/:uid/you/moderation/blocked"
	| "/u/:uid/settings/explore/add"
	| "/u/:uid/settings/languages"
	| "/u/:uid/you/app-passwords"
	| "/u/:uid/settings/profile"
	| "/u/:uid/explore"
	| "/u/:uid/explore/search"
	| "/u/:uid/profile/:actor"
	| "/u/:uid/profile/:actor/lists"
	| "/u/:uid/profile/:actor/with_replies"
	| "/u/:uid/profile/:actor/feed"
	| "/u/:uid/profile/:actor/likes"
	| "/u/:uid/profile/:actor/media"
	| "/u/:uid/notifications"
	| "/u/:uid/explore/tags"
	| "/u/:uid/you/invites"
	| "/u/:uid/you"
	| "/u/:uid/tags/:tag"
	| "/u/:uid/compose"
	| "/r/*";
export type PathsWithoutParams = 
	| "/"
	| "/login";
export type Paths = PathsWithParams | PathsWithoutParams;

export interface Params {
	"/u/:uid": { "uid": string };
	"/u/:uid/you/moderation/content-filter/labeler/:labeler": { "uid": string, "labeler": string };
	"/u/:uid/you/moderation/keyword-filter/:fid/edit": { "uid": string, "fid": string };
	"/u/:uid/profile/:actor/post/:status/reposts": { "uid": string, "actor": string, "status": string };
	"/u/:uid/you/moderation/content-filter": { "uid": string };
	"/u/:uid/you/moderation/content-filter/global": { "uid": string };
	"/u/:uid/you/moderation/keyword-filter": { "uid": string };
	"/u/:uid/profile/:actor/post/:status": { "uid": string, "actor": string, "status": string };
	"/u/:uid/profile/:actor/post/:status/likes": { "uid": string, "actor": string, "status": string };
	"/u/:uid/profile/:actor/lists/:list/edit": { "uid": string, "actor": string, "list": string };
	"/u/:uid/you/moderation/keyword-filter/add": { "uid": string };
	"/u/:uid/you/moderation/lists/self": { "uid": string };
	"/u/:uid/you/moderation/lists/self/new": { "uid": string };
	"/u/:uid/you/moderation/repost-filter": { "uid": string };
	"/u/:uid/profile/:actor/lists/:list": { "uid": string, "actor": string, "list": string };
	"/u/:uid/profile/:actor/lists/:list/feed": { "uid": string, "actor": string, "list": string };
	"/u/:uid/you/moderation/lists": { "uid": string };
	"/u/:uid/you/moderation/muted": { "uid": string };
	"/u/:uid/profile/:actor/feed/:feed": { "uid": string, "actor": string, "feed": string };
	"/u/:uid/you/moderation/lists/block": { "uid": string };
	"/u/:uid/profile/:actor/followers": { "uid": string, "actor": string };
	"/u/:uid/you/moderation/lists/mute": { "uid": string };
	"/u/:uid/you/moderation/muted/temp": { "uid": string };
	"/u/:uid/profile/:actor/follows": { "uid": string, "actor": string };
	"/u/:uid/settings/explore": { "uid": string };
	"/u/:uid/you/moderation/blocked": { "uid": string };
	"/u/:uid/settings/explore/add": { "uid": string };
	"/u/:uid/settings/languages": { "uid": string };
	"/u/:uid/you/app-passwords": { "uid": string };
	"/u/:uid/settings/profile": { "uid": string };
	"/u/:uid/explore": { "uid": string };
	"/u/:uid/explore/search": { "uid": string };
	"/u/:uid/profile/:actor": { "uid": string, "actor": string };
	"/u/:uid/profile/:actor/lists": { "uid": string, "actor": string };
	"/u/:uid/profile/:actor/with_replies": { "uid": string, "actor": string };
	"/u/:uid/profile/:actor/feed": { "uid": string, "actor": string };
	"/u/:uid/profile/:actor/likes": { "uid": string, "actor": string };
	"/u/:uid/profile/:actor/media": { "uid": string, "actor": string };
	"/u/:uid/notifications": { "uid": string };
	"/u/:uid/explore/tags": { "uid": string };
	"/u/:uid/you/invites": { "uid": string };
	"/u/:uid/you": { "uid": string };
	"/u/:uid/tags/:tag": { "uid": string, "tag": string };
	"/u/:uid/compose": { "uid": string };
	"/r/*": { "*": string };
}

type NavigateWithParamOptions<P> = P extends number
	? []
	: P extends PathsWithParams
		? [Partial<NavigateOptions> & { params: Params[P] }]
		: [Partial<NavigateOptions> & { params?: never }] | [];

export const useParams: <P extends PathsWithParams>(path: P) => Params[P] = useParams_ as any;
export const useNavigate = (): (<P extends Paths | number>(
	href: P,
	...options: NavigateWithParamOptions<P>
) => void) => {
	const navigate = useNavigate_();
	return ((path: any, options: any) => {
		if (typeof path === "number") {
			return navigate(path);
		}

		const finalizedPath = generatePath(path, options?.params);
		return navigate(finalizedPath, options);
	}) as any;
};

const RE_PARAM = /\/:(\w+)(\??)/g;
export const generatePath = ((path: string, params: Record<string, string> | undefined) => {
	if (!params) {
		return path;
	}

  return path.replace(RE_PARAM, (_, segment) =>
    (params as any)[segment] ? `/${(params as any)[segment]}` : ""
  );
}) as GeneratePathFunction;

interface GeneratePathFunction {
  <P extends PathsWithoutParams>(path: P): string;
  <P extends PathsWithParams>(path: P, params: Params[P]): string;
}
